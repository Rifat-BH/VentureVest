# -*- coding: utf-8 -*-
"""AES_Encryption.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10-GXitzn8fvpjTjsmWCT3XqdWzapKC61
"""

print("hi crypto")

# !pip install pycrypto

# !pip install --upgrade --force-reinstall pycryptodome

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import os

class EncryptionDecryption:
    # Function to pad the data to be a multiple of 16
    def pad(self, data):
        length = 16 - (len(data) % 16)
        return data + bytes([length]) * length

    # Function to encrypt the image
    def encrypt_image(self, input_file, output_file, key):
        # Generate a random initialization vector
        iv = get_random_bytes(16)

        # Create AES cipher object
        cipher = AES.new(key, AES.MODE_CBC, iv)

        with open(input_file, 'rb') as f:
            data = f.read()

        # Pad the data to be a multiple of 16 bytes
        padded_data = self.pad(data)

        # Encrypt the padded data
        encrypted_data = cipher.encrypt(padded_data)

        # Write the IV and encrypted data to the output file
        with open(output_file, 'wb') as f:
            f.write(iv)
            f.write(encrypted_data)
            
    def unpad(self, data):
         return data[:-data[-1]]

    # Function to decrypt the image
    def decrypt_image(self, input_file, output_file, key):
        
        key = b"\xc8\xc6C\x00\xfa\x8e\x10\xd7\x84z\xea\x9b'\xbcFF"
        # Read the IV and encrypted data from the input file
        with open(input_file, 'rb') as f:
            iv = f.read(16)
            encrypted_data = f.read()

        # Create AES cipher object
        cipher = AES.new(key, AES.MODE_CBC, iv)

        # Decrypt the data
        decrypted_data = cipher.decrypt(encrypted_data)

        # Remove padding
        unpadded_data = self.unpad(decrypted_data)

        # Write the decrypted data to the output file
        with open(output_file, 'wb') as f:
            f.write(unpadded_data)



# # Example usage
# if __name__ == "__main__":
#     # Specify input and output file paths
#     input_file = 'image.png'
#     output_file = 'encrypted_image.jpg'

#     # Generate a random 16-byte key
#     key = os.urandom(16)

#     # Encrypt the image
#     encrypt_image(input_file, output_file, key)
#     print(key)

#     print("Image encrypted successfully.")

# # from Crypto.Cipher import AES

# # Function to remove padding from the decrypted data
